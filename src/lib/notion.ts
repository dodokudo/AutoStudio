import { Client } from '@notionhq/client';
import type { CreatePageParameters, QueryDatabaseResponse } from '@notionhq/client/build/src/api-endpoints';

export interface NotionContentPayload {
  autoStudioId: string;
  title: string;
  media: string;
  contentType: string;
  status: string;
  targetPersona?: string[];
  themeKeyword?: string;
  sourceUrls?: string[];
  generatedAt?: string;
  templateName?: string;
  body?: string;
}

function ensureEnv(name: string): string {
  const value = process.env[name];
  if (!value) {
    throw new Error(`${name} is not set`);
  }
  return value;
}

export function createNotionClient(): Client {
  const token = ensureEnv('NOTION_API_TOKEN');
  return new Client({ auth: token });
}

export function getNotionContentDatabaseId(): string {
  return ensureEnv('NOTION_CONTENT_DATABASE_ID');
}

async function findPageByAutoStudioId(client: Client, databaseId: string, autoStudioId: string) {
  const response: QueryDatabaseResponse = await client.databases.query({
    database_id: databaseId,
    filter: {
      property: 'AutoStudio ID',
      rich_text: {
        equals: autoStudioId,
      },
    },
    page_size: 1,
  });

  const page = response.results[0];
  return page?.object === 'page' ? page : null;
}

type SimpleRichText = {
  type: 'text';
  text: { content: string };
};

type ParagraphBlock = {
  object: 'block';
  type: 'paragraph';
  paragraph: { rich_text: SimpleRichText[] };
};

function toRichText(content: string): SimpleRichText[] {
  return [
    {
      type: 'text',
      text: { content },
    },
  ];
}

type PageProperties = CreatePageParameters['properties'];

function buildProperties(payload: NotionContentPayload): PageProperties {
  const properties: PageProperties = {
    Name: {
      title: toRichText(payload.title),
    },
    Media: {
      select: { name: payload.media },
    },
    'Content Type': {
      select: { name: payload.contentType },
    },
    Status: {
      select: { name: payload.status },
    },
    'AutoStudio ID': {
      rich_text: toRichText(payload.autoStudioId),
    },
    'Last Synced': {
      date: { start: new Date().toISOString() },
    },
  };

  if (payload.targetPersona?.length) {
    (properties as Record<string, unknown>)['Target Persona'] = {
      multi_select: payload.targetPersona.map((value) => ({ name: value })),
    };
  }

  if (payload.themeKeyword) {
    (properties as Record<string, unknown>)['Theme Keyword'] = {
      rich_text: toRichText(payload.themeKeyword),
    };
  }

  if (payload.generatedAt) {
    (properties as Record<string, unknown>)['Generated At'] = {
      date: { start: payload.generatedAt },
    };
  }

  if (payload.templateName) {
    (properties as Record<string, unknown>)['Claude Template'] = {
      rich_text: toRichText(payload.templateName),
    };
  }

  if (payload.sourceUrls?.length) {
    const text = payload.sourceUrls.join('\n');
    (properties as Record<string, unknown>)['Source Videos'] = {
      rich_text: toRichText(text),
    };
  }

  return properties;
}

function bodyToBlocks(body: string): ParagraphBlock[] {
  const paragraphs = body
    .split(/\n\n+/)
    .map((chunk) => chunk.trim())
    .filter(Boolean);
  if (paragraphs.length === 0) {
    return [
      {
        object: 'block',
        type: 'paragraph',
        paragraph: {
          rich_text: toRichText('Generated by AutoStudio'),
        },
      },
    ];
  }

  return paragraphs.map((paragraph) => ({
    object: 'block',
    type: 'paragraph',
    paragraph: {
      rich_text: toRichText(paragraph),
    },
  }));
}

async function clearExistingBlocks(client: Client, pageId: string) {
  const existing = await client.blocks.children.list({ block_id: pageId, page_size: 100 });
  await Promise.all(
    existing.results.map(async (block) => {
      if ('id' in block) {
        await client.blocks.delete({ block_id: block.id });
      }
    }),
  );
}

export async function upsertContentPage(client: Client, databaseId: string, payload: NotionContentPayload) {
  const existingPage = await findPageByAutoStudioId(client, databaseId, payload.autoStudioId);
  const properties = buildProperties(payload);

  if (!existingPage) {
    const response = await client.pages.create({
      parent: { database_id: databaseId },
      properties,
    });

    if (response.object !== 'page') {
      throw new Error('Failed to create Notion page');
    }

    if (payload.body) {
      const blocks = bodyToBlocks(payload.body);
      await client.blocks.children.append({ block_id: response.id, children: blocks });
    }
    return response.id;
  }

  await client.pages.update({
    page_id: existingPage.id,
    properties,
  });

  if (payload.body) {
    await clearExistingBlocks(client, existingPage.id);
    const blocks = bodyToBlocks(payload.body);
    await client.blocks.children.append({ block_id: existingPage.id, children: blocks });
  }

  return existingPage.id;
}
